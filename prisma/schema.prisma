// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  username String   @unique
  email    String   @unique
  password String
  profile  Profile?
  role     Roles    @default(USER)
  createAt DateTime @default(now())

  tweets    Tweet[]
  comment   Comment[]
  following Follows[] @relation("Following")
  follower  Follows[] @relation("Follower")
  Like      Like[]
}

model Profile {
  userId   String    @id
  name     String
  bio      String?
  image    String?
  createAt DateTime  @default(now())
  updateAt DateTime?
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follows {
  id                Int      @id @default(autoincrement())
  followingUsername String
  followerUsername  String
  createAt          DateTime @default(now())
  following         User     @relation("Following", fields: [followingUsername], references: [username], onDelete: Cascade)
  follower          User     @relation("Follower", fields: [followerUsername], references: [username], onDelete: Cascade)

  @@unique([followerUsername, followingUsername])
}

model Tweet {
  id       Int       @id @default(autoincrement())
  username String
  text     String
  image    String?
  createAt DateTime  @default(now())
  comment  Comment[]
  liked    Like[]

  user User @relation(fields: [username], references: [username], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  tweetId   Int
  username  String
  text      String
  image     String?
  repliesId Int?
  createAt  DateTime @default(now())

  tweet Tweet @relation(fields: [tweetId], references: [id])
  user  User  @relation(fields: [username], references: [username])

  commentReplies Comment?  @relation("CommentReplies", fields: [repliesId], references: [id], onDelete: Cascade)
  replies        Comment[] @relation("CommentReplies")
}

model Like {
  id Int @id @default(autoincrement())

  tweetId  Int
  username String

  user  User   @relation(fields: [username], references: [username], onDelete: Cascade)
  tweet Tweet? @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@unique([tweetId, username])
}

enum Roles {
  USER
  ADMIN
}
